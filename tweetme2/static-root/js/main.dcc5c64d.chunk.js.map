{"version":3,"sources":["logo.svg","tweets/components.js","lookup/components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TweetComponents","props","textAreaRef","React","createRef","useState","newTweet","setNewTweet","className","onSubmit","event","preventDefault","value","current","tempTweet","unshift","content","id","likes","ref","type","TweetList","new_tweet","tweetinit","setTweetInit","tweets","setTweets","useEffect","console","log","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","e","send","loadTweets","map","item","index","Tweet","tweet","key","ActionBtn","action","setLikes","userLike","setUserLike","actionDisplay","display","actionDislay","onClick","App","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","appEl","document","getElementById","ReactDOM","render","TweetEl","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.dcc5c64d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React,{useEffect,useState} from 'react'\r\n\r\nimport {loadTweets} from '../lookup'\r\n\r\n\r\nexport function TweetComponents(props){\r\n    const textAreaRef=React.createRef()\r\n    const [newTweet,setNewTweet]=useState([])\r\n    const handleSubmit=(event)=>{\r\n        event.preventDefault()\r\n        const value=textAreaRef.current.value\r\n        textAreaRef.current.value=\"\"\r\n        let tempTweet=[...newTweet]\r\n        tempTweet.unshift({\r\n            content:value,\r\n            id:1234,\r\n            likes:1\r\n        })\r\n        setNewTweet(tempTweet)\r\n          }\r\n            return <div className={props.className}>\r\n    <div className=\"col-12 mb-3\">\r\n        <form onSubmit={handleSubmit}>\r\n            <textarea ref={textAreaRef} className=\"form-control\"></textarea>\r\n            <button type=\"submit\" className=\"bt btn-primary my-3\">Tweet</button>\r\n        </form>\r\n        < TweetList new_tweet={newTweet}/>\r\n    </div>\r\n    </div>\r\n    \r\n}\r\n\r\nexport function TweetList(props){\r\n    const [tweetinit,setTweetInit]=useState([])\r\n    const[tweets,setTweets]=useState([])\r\n    //setTweetInit(props.new_tweet.concat(tweetinit))\r\n\r\n    useEffect(()=>{\r\n      console.log(\"Second one\")\r\n      const final=[...props.new_tweet].concat(tweetinit)\r\n      if (final.length!==tweets.length){\r\n        setTweets(final)\r\n      }\r\n    },[props.new_tweet,tweets,tweetinit])\r\n  \r\n    useEffect(()=>{\r\n      console.log(\"First one\")\r\n      const callback=(response,status)=>{\r\n        if (status==200)\r\n        setTweetInit(response)\r\n      }\r\n  \r\n      loadTweets(callback)\r\n\r\n      \r\n    },[])\r\n  \r\n    return tweets.map((item,index)=>{\r\n      return <Tweet tweet={item} className=\"my-5 py-5 border bg-white text-dark\" key={`${index}-{item.id}`} />\r\n     })\r\n  \r\n  }\r\n\r\n\r\n\r\nexport function ActionBtn(props){\r\n    const {tweet,action}=props\r\n    //let likes=tweet.likes\r\n    const [likes,setLikes]=useState(tweet.likes ? tweet.likes : 0)\r\n\r\n    const [userLike,setUserLike]=useState(tweet.userLike?true:false)\r\n    const actionDisplay=action.display\r\n    const actionDislay=actionDisplay ? actionDisplay:\"Action\"\r\n    const display=action.type===\"Likes\"?`${tweet.likes} ${action.display}`:action.display\r\n    \r\n    const handleAction=(event)=>{\r\n        event.preventDefault()\r\n        if (action.type===\"like\"){\r\n        if (userLike===true){\r\n            setLikes(likes-1)\r\n            setUserLike(false)\r\n        }else{\r\n            setLikes(likes+1)\r\n            setUserLike(true)\r\n        }\r\n    }\r\n    }\r\n    const className=props.className ? props.className:'btn btn-primary btn-small'\r\nreturn <button onClick={handleAction} className={className}>{likes} {actionDislay}</button>\r\n  }\r\n  \r\n  \r\nexport function Tweet(props){\r\n    const {tweet}=props\r\n    const className=props.className ? props.className:\"col-10 mx-auto col-md-6\"\r\n  return <div className={className}>\r\n    <p>{tweet.id}-{tweet.content}</p>\r\n    <div className=\"btn btn-group\">\r\n        < ActionBtn tweet={tweet} action={{type:\"like\",display:\"Likes\"}}/>\r\n        <ActionBtn tweet={tweet} action={{type:\"unlike\",display:\"Unlike\"}}/>\r\n        <ActionBtn tweet={tweet} action={{type:\"retweet\",display:\"Retweet\"}}/>\r\n    </div>\r\n  </div>\r\n  }","import React from 'react'\r\n\r\nexport function loadTweets(callback){\r\n    //This is to used to refresh the page after sometime without refreshing\r\n    const xhr=new XMLHttpRequest() //shr=Someclass()('similar in python')\r\n    const method='GET' // POST\r\n    const url=\"http://127.0.0.1:8000/api/tweet/\"\r\n    const responseType=\"json\"\r\n    \r\n    xhr.responseType=responseType\r\n    xhr.open(method,url)\r\n    xhr.onload=function(){\r\n      callback(xhr.response,xhr.status)\r\n    }\r\n    xhr.onerror=(e)=>{\r\n      console.log(e)\r\n    }\r\n    xhr.send()\r\n  }","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {TweetComponents} from './tweets'\n\n\n\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n  \n          < TweetComponents />\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {TweetComponents} from './tweets'\nimport * as serviceWorker from './serviceWorker';\n\n\nconst appEl=document.getElementById('root')\nif (appEl){\nReactDOM.render(\n    <App />,appEl\n \n)}\n const TweetEl=document.getElementById(\"tweetme-2\")\nif (TweetEl){\n  ReactDOM.render(\n      <TweetComponents />,TweetEl\n  )\n};\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}